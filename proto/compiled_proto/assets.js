// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Account = exports.Account = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Trail = exports.Trail = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineAccount()
defineTrail()

function defineAccount () {
  var enc = [
    encodings.string,
    encodings.int64
  ]

  Account.encodingLength = encodingLength
  Account.encode = encode
  Account.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.address)) {
      var len = enc[0].encodingLength(obj.address)
      length += 1 + len
    }
    if (defined(obj.userName)) {
      var len = enc[0].encodingLength(obj.userName)
      length += 1 + len
    }
    if (defined(obj.balance)) {
      var len = enc[1].encodingLength(obj.balance)
      length += 1 + len
    }
    if (defined(obj.publicKey)) {
      var len = enc[0].encodingLength(obj.publicKey)
      length += 1 + len
    }
    if (defined(obj.email)) {
      var len = enc[0].encodingLength(obj.email)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.address)) {
      buf[offset++] = 10
      enc[0].encode(obj.address, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.userName)) {
      buf[offset++] = 18
      enc[0].encode(obj.userName, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.balance)) {
      buf[offset++] = 24
      enc[1].encode(obj.balance, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.publicKey)) {
      buf[offset++] = 34
      enc[0].encode(obj.publicKey, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.email)) {
      buf[offset++] = 42
      enc[0].encode(obj.email, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      address: "",
      userName: "",
      balance: 0,
      publicKey: "",
      email: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.address = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.userName = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 3:
        obj.balance = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 4:
        obj.publicKey = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 5:
        obj.email = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTrail () {
  Trail.Actions = {
  "CREDIT": 0,
  "DEBIT": 1,
  "ACCOUNT_CREATED": 2
}

  var enc = [
    encodings.string,
    encodings.enum
  ]

  Trail.encodingLength = encodingLength
  Trail.encode = encode
  Trail.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.userName)) {
      var len = enc[0].encodingLength(obj.userName)
      length += 1 + len
    }
    if (defined(obj.txnNumber)) {
      var len = enc[0].encodingLength(obj.txnNumber)
      length += 1 + len
    }
    if (defined(obj.timestamp)) {
      var len = enc[0].encodingLength(obj.timestamp)
      length += 1 + len
    }
    if (defined(obj.userAddress)) {
      var len = enc[0].encodingLength(obj.userAddress)
      length += 1 + len
    }
    if (defined(obj.action)) {
      var len = enc[1].encodingLength(obj.action)
      length += 1 + len
    }
    if (defined(obj.address)) {
      var len = enc[0].encodingLength(obj.address)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.userName)) {
      buf[offset++] = 10
      enc[0].encode(obj.userName, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.txnNumber)) {
      buf[offset++] = 18
      enc[0].encode(obj.txnNumber, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.timestamp)) {
      buf[offset++] = 26
      enc[0].encode(obj.timestamp, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.userAddress)) {
      buf[offset++] = 34
      enc[0].encode(obj.userAddress, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.action)) {
      buf[offset++] = 48
      enc[1].encode(obj.action, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.address)) {
      buf[offset++] = 58
      enc[0].encode(obj.address, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      userName: "",
      txnNumber: "",
      timestamp: "",
      userAddress: "",
      action: 0,
      address: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.userName = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.txnNumber = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 3:
        obj.timestamp = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 4:
        obj.userAddress = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 6:
        obj.action = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 7:
        obj.address = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
