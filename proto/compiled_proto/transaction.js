// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Payload = exports.Payload = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

definePayload()

function definePayload () {
  Payload.Action = {
  "ACCOUNT": 0,
  "TRANSACT": 1,
  "BALANCE": 2
}

  var Account = Payload.Account = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Transact = Payload.Transact = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineAccount()
  defineTransact()

  function defineAccount () {
    var enc = [
      encodings.string
    ]

    Account.encodingLength = encodingLength
    Account.encode = encode
    Account.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.name)) {
        var len = enc[0].encodingLength(obj.name)
        length += 1 + len
      }
      if (defined(obj.email)) {
        var len = enc[0].encodingLength(obj.email)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.name)) {
        buf[offset++] = 10
        enc[0].encode(obj.name, buf, offset)
        offset += enc[0].encode.bytes
      }
      if (defined(obj.email)) {
        buf[offset++] = 42
        enc[0].encode(obj.email, buf, offset)
        offset += enc[0].encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        name: "",
        email: ""
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.name = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          break
          case 5:
          obj.email = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineTransact () {
    Transact.Type = {
  "CREDIT": 0,
  "DEBIT": 1
}

    var enc = [
      encodings.int64,
      encodings.enum
    ]

    Transact.encodingLength = encodingLength
    Transact.encode = encode
    Transact.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (defined(obj.amount)) {
        var len = enc[0].encodingLength(obj.amount)
        length += 1 + len
      }
      if (defined(obj.type)) {
        var len = enc[1].encodingLength(obj.type)
        length += 1 + len
      }
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (defined(obj.amount)) {
        buf[offset++] = 8
        enc[0].encode(obj.amount, buf, offset)
        offset += enc[0].encode.bytes
      }
      if (defined(obj.type)) {
        buf[offset++] = 16
        enc[1].encode(obj.type, buf, offset)
        offset += enc[1].encode.bytes
      }
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        amount: 0,
        type: 0
      }
      while (true) {
        if (end <= offset) {
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.amount = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          break
          case 2:
          obj.type = enc[1].decode(buf, offset)
          offset += enc[1].decode.bytes
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  var enc = [
    encodings.enum,
    Account,
    Transact,
    encodings.string
  ]

  Payload.encodingLength = encodingLength
  Payload.encode = encode
  Payload.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.action)) {
      var len = enc[0].encodingLength(obj.action)
      length += 1 + len
    }
    if (defined(obj.createAccount)) {
      var len = enc[1].encodingLength(obj.createAccount)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.transact)) {
      var len = enc[2].encodingLength(obj.transact)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.issueTimestamp)) {
      var len = enc[3].encodingLength(obj.issueTimestamp)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.action)) {
      buf[offset++] = 8
      enc[0].encode(obj.action, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.createAccount)) {
      buf[offset++] = 18
      varint.encode(enc[1].encodingLength(obj.createAccount), buf, offset)
      offset += varint.encode.bytes
      enc[1].encode(obj.createAccount, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.transact)) {
      buf[offset++] = 26
      varint.encode(enc[2].encodingLength(obj.transact), buf, offset)
      offset += varint.encode.bytes
      enc[2].encode(obj.transact, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.issueTimestamp)) {
      buf[offset++] = 34
      enc[3].encode(obj.issueTimestamp, buf, offset)
      offset += enc[3].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      action: 0,
      createAccount: null,
      transact: null,
      issueTimestamp: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.action = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.createAccount = enc[1].decode(buf, offset, offset + len)
        offset += enc[1].decode.bytes
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.transact = enc[2].decode(buf, offset, offset + len)
        offset += enc[2].decode.bytes
        break
        case 4:
        obj.issueTimestamp = enc[3].decode(buf, offset)
        offset += enc[3].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
